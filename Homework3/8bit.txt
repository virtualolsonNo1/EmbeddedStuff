
sketch_feb25a.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  000004dc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000530  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106b  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00001723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ee  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800104 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 rand.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000272 l     F .text	00000092 do_rand
00800100 l     O .data	00000004 next
00000000 l    df *ABS*	00000000 _clear_bss.o
00000094 l       .text	00000000 .do_clear_bss_start
00000092 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800114 l     O .bss	00000004 timer0_millis
00800113 l     O .bss	00000001 timer0_fract
0080010f l     O .bss	00000004 timer0_overflow_count
0080010e l     O .bss	00000001 result_8
0080010c l     O .bss	00000002 result_16
00800108 l     O .bss	00000004 result_32
00800104 l     O .bss	00000004 result_f
00000000 l    df *ABS*	00000000 _divmodsi4.o
00000348 l       .text	00000000 __divmodsi4_neg2
00000356 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
000003b4 l       .text	00000000 __udivmodsi4_ep
0000039a l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
00000408 l       .text	00000000 __divmodhi4_neg1
00000410 l       .text	00000000 __divmodhi4_neg2
00000416 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0000042e l       .text	00000000 __udivmodhi4_ep
00000420 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
00000442 l       .text	00000000 __stop_program
000000a2  w      .text	00000000 __vector_22
000003d2 g       .text	0000001e .hidden __umulhisi3
000000a2  w      .text	00000000 __vector_1
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
00000418 g       .text	00000028 .hidden __udivmodhi4
00000068 g       .text	00000000 __trampolines_start
00000444 g       .text	00000000 _etext
000000a2  w      .text	00000000 __vector_24
000000a2  w      .text	00000000 __vector_12
000000a2 g       .text	00000000 __bad_interrupt
00000448 g       *ABS*	00000000 __data_load_end
000000a2  w      .text	00000000 __vector_6
00000068 g       .text	00000000 __trampolines_end
000000a2  w      .text	00000000 __vector_3
000000a2  w      .text	00000000 __vector_23
00000444 g       *ABS*	00000000 __data_load_start
00000068 g       .text	00000000 __dtors_end
00800118 g       .bss	00000000 __bss_end
00000368 g       .text	00000016 .hidden __muluhisi3
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_25
000000a2  w      .text	00000000 __vector_11
00000068  w      .text	00000000 __init
00000000  w      *UND*	00000000 _Z14serialEventRunv
000000a2  w      .text	00000000 __vector_13
00000304 g     F .text	00000006 rand_r
000000a2  w      .text	00000000 __vector_17
000000a2  w      .text	00000000 __vector_19
000000a2  w      .text	00000000 __vector_7
0000008a g       .text	00000010 .hidden __do_clear_bss
00810000 g       .comment	00000000 __eeprom_end
0000030a g     F .text	0000000a rand
00000000 g       .text	00000000 __vectors
00800104 g       .data	00000000 __data_end
00000000  w      .text	00000000 __vector_default
000003f0 g       .text	00000028 .hidden __divmodhi4
000000a2  w      .text	00000000 __vector_5
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00000068 g       .text	00000000 __ctors_start
00000074 g       .text	00000016 .hidden __do_copy_data
00800104 g       .bss	00000000 __bss_start
0000013a g     F .text	00000138 main
00000314 g     F .text	00000016 srand
000000a2  w      .text	00000000 __vector_4
00800060 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
00000358 g       .text	00000010 .hidden __negsi2
00000000  w      *ABS*	00000000 __heap_end
000000a2  w      .text	00000000 __vector_9
000000a2  w      .text	00000000 __vector_2
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_21
000000a2  w      .text	00000000 __vector_15
00000384 g       .text	0000000a .hidden __mulohisi3
00000068 g       .text	00000000 __dtors_start
00000068 g       .text	00000000 __ctors_end
0000032a g       .text	0000002e .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
00800104 g       .data	00000000 _edata
00800118 g       .comment	00000000 _end
000000a2  w      .text	00000000 __vector_8
00000440  w      .text	00000000 .hidden exit
000003f0 g       .text	00000000 .hidden _div
0000038e g       .text	00000044 .hidden __udivmodsi4
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
00000440 g       .text	00000000 .hidden _exit
000000a2  w      .text	00000000 __vector_14
000000a2  w      .text	00000000 __vector_10
000000a6 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
000000a2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_20
0000037e g       .text	00000006 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer0_millis>
  c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer0_millis+0x1>
  c4:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer0_millis+0x2>
  c8:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
  cc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
  d4:	2d 37       	cpi	r18, 0x7D	; 125
  d6:	58 f5       	brcc	.+86     	; 0x12e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
  de:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <timer0_fract>
	timer0_millis = m;
  e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer0_millis>
  e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer0_millis+0x1>
  ea:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer0_millis+0x2>
  ee:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer0_millis+0x3>
	timer0_overflow_count++;
  f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer0_overflow_count>
  f6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer0_overflow_count+0x1>
  fa:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <timer0_overflow_count+0x2>
  fe:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <timer0_overflow_count+0x3>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer0_overflow_count>
 10c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer0_overflow_count+0x1>
 110:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <timer0_overflow_count+0x2>
 114:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <timer0_overflow_count+0x3>
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 12e:	26 e8       	ldi	r18, 0x86	; 134
 130:	23 0f       	add	r18, r19
		m += 1;
 132:	02 96       	adiw	r24, 0x02	; 2
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	d2 cf       	rjmp	.-92     	; 0xde <__vector_16+0x38>

0000013a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 13a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 13c:	84 b5       	in	r24, 0x24	; 36
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	81 60       	ori	r24, 0x01	; 1
 146:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 154:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 15e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 162:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 16c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 176:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 180:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 18a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 1a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
  int8_t a,b;
  int16_t c,d;
  int32_t e,f;
  float g,h;

  a = (int8_t) (rand() & 0xFF);
 1c4:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 1c8:	f8 2e       	mov	r15, r24
  b = (int8_t) (rand() & 0xFF);
 1ca:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 1ce:	68 2f       	mov	r22, r24

  result_8 = a-b;
 1d0:	8f 2d       	mov	r24, r15
 1d2:	86 1b       	sub	r24, r22
 1d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <result_8>
  asm volatile ("nop");
 1d8:	00 00       	nop
  result_8 = a/b;
 1da:	8f 2d       	mov	r24, r15
 1dc:	ff 0c       	add	r15, r15
 1de:	99 0b       	sbc	r25, r25
 1e0:	06 2e       	mov	r0, r22
 1e2:	00 0c       	add	r0, r0
 1e4:	77 0b       	sbc	r23, r23
 1e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 1ea:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <result_8>


  c = (int16_t) (rand() & 0xFFFF);
 1ee:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 1f2:	7c 01       	movw	r14, r24
  d = (int16_t) (rand() & 0xFFFF);
 1f4:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 1f8:	bc 01       	movw	r22, r24

  result_16 = c-d;
 1fa:	c7 01       	movw	r24, r14
 1fc:	86 1b       	sub	r24, r22
 1fe:	97 0b       	sbc	r25, r23
 200:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <result_16+0x1>
 204:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <result_16>
  asm volatile ("nop");
 208:	00 00       	nop
  result_16 = c/d;
 20a:	c7 01       	movw	r24, r14
 20c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 210:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <result_16+0x1>
 214:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <result_16>

  e = (int32_t) (rand() & 0xFFFFFFFF);
 218:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 21c:	6c 01       	movw	r12, r24
 21e:	99 0f       	add	r25, r25
 220:	ee 08       	sbc	r14, r14
 222:	ff 08       	sbc	r15, r15
  f = (int32_t) (rand() & 0xFFFFFFFF);
 224:	0e 94 85 01 	call	0x30a	; 0x30a <rand>
 228:	9c 01       	movw	r18, r24
 22a:	99 0f       	add	r25, r25
 22c:	44 0b       	sbc	r20, r20
 22e:	55 0b       	sbc	r21, r21

  result_32 = e-f;
 230:	d7 01       	movw	r26, r14
 232:	c6 01       	movw	r24, r12
 234:	82 1b       	sub	r24, r18
 236:	93 0b       	sbc	r25, r19
 238:	a4 0b       	sbc	r26, r20
 23a:	b5 0b       	sbc	r27, r21
 23c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <result_32>
 240:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <result_32+0x1>
 244:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <result_32+0x2>
 248:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <result_32+0x3>
  asm volatile ("nop");
 24c:	00 00       	nop
  result_32 = e/f;
 24e:	c7 01       	movw	r24, r14
 250:	b6 01       	movw	r22, r12
 252:	0e 94 95 01 	call	0x32a	; 0x32a <__divmodsi4>
 256:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <result_32>
 25a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <result_32+0x1>
 25e:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <result_32+0x2>
 262:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <result_32+0x3>
 266:	20 97       	sbiw	r28, 0x00	; 0
 268:	09 f4       	brne	.+2      	; 0x26c <main+0x132>
 26a:	ac cf       	rjmp	.-168    	; 0x1c4 <main+0x8a>
 26c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 270:	a9 cf       	rjmp	.-174    	; 0x1c4 <main+0x8a>

00000272 <do_rand>:
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
 288:	68 81       	ld	r22, Y
 28a:	79 81       	ldd	r23, Y+1	; 0x01
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	9b 81       	ldd	r25, Y+3	; 0x03
 290:	61 15       	cp	r22, r1
 292:	71 05       	cpc	r23, r1
 294:	81 05       	cpc	r24, r1
 296:	91 05       	cpc	r25, r1
 298:	21 f4       	brne	.+8      	; 0x2a2 <do_rand+0x30>
 29a:	64 e2       	ldi	r22, 0x24	; 36
 29c:	79 ed       	ldi	r23, 0xD9	; 217
 29e:	8b e5       	ldi	r24, 0x5B	; 91
 2a0:	97 e0       	ldi	r25, 0x07	; 7
 2a2:	2d e1       	ldi	r18, 0x1D	; 29
 2a4:	33 ef       	ldi	r19, 0xF3	; 243
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	0e 94 95 01 	call	0x32a	; 0x32a <__divmodsi4>
 2ae:	49 01       	movw	r8, r18
 2b0:	5a 01       	movw	r10, r20
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	a7 ea       	ldi	r26, 0xA7	; 167
 2b8:	b1 e4       	ldi	r27, 0x41	; 65
 2ba:	0e 94 b4 01 	call	0x368	; 0x368 <__muluhisi3>
 2be:	6b 01       	movw	r12, r22
 2c0:	7c 01       	movw	r14, r24
 2c2:	ac ee       	ldi	r26, 0xEC	; 236
 2c4:	b4 ef       	ldi	r27, 0xF4	; 244
 2c6:	a5 01       	movw	r20, r10
 2c8:	94 01       	movw	r18, r8
 2ca:	0e 94 c2 01 	call	0x384	; 0x384 <__mulohisi3>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	8c 0d       	add	r24, r12
 2d4:	9d 1d       	adc	r25, r13
 2d6:	ae 1d       	adc	r26, r14
 2d8:	bf 1d       	adc	r27, r15
 2da:	b7 ff       	sbrs	r27, 7
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <do_rand+0x72>
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	a1 09       	sbc	r26, r1
 2e2:	b0 48       	sbci	r27, 0x80	; 128
 2e4:	88 83       	st	Y, r24
 2e6:	99 83       	std	Y+1, r25	; 0x01
 2e8:	aa 83       	std	Y+2, r26	; 0x02
 2ea:	bb 83       	std	Y+3, r27	; 0x03
 2ec:	9f 77       	andi	r25, 0x7F	; 127
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	bf 90       	pop	r11
 2fc:	af 90       	pop	r10
 2fe:	9f 90       	pop	r9
 300:	8f 90       	pop	r8
 302:	08 95       	ret

00000304 <rand_r>:
 304:	0e 94 39 01 	call	0x272	; 0x272 <do_rand>
 308:	08 95       	ret

0000030a <rand>:
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 39 01 	call	0x272	; 0x272 <do_rand>
 312:	08 95       	ret

00000314 <srand>:
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	a0 e0       	ldi	r26, 0x00	; 0
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 31c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 320:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 324:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 328:	08 95       	ret

0000032a <__divmodsi4>:
 32a:	05 2e       	mov	r0, r21
 32c:	97 fb       	bst	r25, 7
 32e:	1e f4       	brtc	.+6      	; 0x336 <__divmodsi4+0xc>
 330:	00 94       	com	r0
 332:	0e 94 ac 01 	call	0x358	; 0x358 <__negsi2>
 336:	57 fd       	sbrc	r21, 7
 338:	07 d0       	rcall	.+14     	; 0x348 <__divmodsi4_neg2>
 33a:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodsi4>
 33e:	07 fc       	sbrc	r0, 7
 340:	03 d0       	rcall	.+6      	; 0x348 <__divmodsi4_neg2>
 342:	4e f4       	brtc	.+18     	; 0x356 <__divmodsi4_exit>
 344:	0c 94 ac 01 	jmp	0x358	; 0x358 <__negsi2>

00000348 <__divmodsi4_neg2>:
 348:	50 95       	com	r21
 34a:	40 95       	com	r20
 34c:	30 95       	com	r19
 34e:	21 95       	neg	r18
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	4f 4f       	sbci	r20, 0xFF	; 255
 354:	5f 4f       	sbci	r21, 0xFF	; 255

00000356 <__divmodsi4_exit>:
 356:	08 95       	ret

00000358 <__negsi2>:
 358:	90 95       	com	r25
 35a:	80 95       	com	r24
 35c:	70 95       	com	r23
 35e:	61 95       	neg	r22
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	8f 4f       	sbci	r24, 0xFF	; 255
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	08 95       	ret

00000368 <__muluhisi3>:
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__umulhisi3>
 36c:	a5 9f       	mul	r26, r21
 36e:	90 0d       	add	r25, r0
 370:	b4 9f       	mul	r27, r20
 372:	90 0d       	add	r25, r0
 374:	a4 9f       	mul	r26, r20
 376:	80 0d       	add	r24, r0
 378:	91 1d       	adc	r25, r1
 37a:	11 24       	eor	r1, r1
 37c:	08 95       	ret

0000037e <__mulshisi3>:
 37e:	b7 ff       	sbrs	r27, 7
 380:	0c 94 b4 01 	jmp	0x368	; 0x368 <__muluhisi3>

00000384 <__mulohisi3>:
 384:	0e 94 b4 01 	call	0x368	; 0x368 <__muluhisi3>
 388:	82 1b       	sub	r24, r18
 38a:	93 0b       	sbc	r25, r19
 38c:	08 95       	ret

0000038e <__udivmodsi4>:
 38e:	a1 e2       	ldi	r26, 0x21	; 33
 390:	1a 2e       	mov	r1, r26
 392:	aa 1b       	sub	r26, r26
 394:	bb 1b       	sub	r27, r27
 396:	fd 01       	movw	r30, r26
 398:	0d c0       	rjmp	.+26     	; 0x3b4 <__udivmodsi4_ep>

0000039a <__udivmodsi4_loop>:
 39a:	aa 1f       	adc	r26, r26
 39c:	bb 1f       	adc	r27, r27
 39e:	ee 1f       	adc	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	a2 17       	cp	r26, r18
 3a4:	b3 07       	cpc	r27, r19
 3a6:	e4 07       	cpc	r30, r20
 3a8:	f5 07       	cpc	r31, r21
 3aa:	20 f0       	brcs	.+8      	; 0x3b4 <__udivmodsi4_ep>
 3ac:	a2 1b       	sub	r26, r18
 3ae:	b3 0b       	sbc	r27, r19
 3b0:	e4 0b       	sbc	r30, r20
 3b2:	f5 0b       	sbc	r31, r21

000003b4 <__udivmodsi4_ep>:
 3b4:	66 1f       	adc	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a 94       	dec	r1
 3be:	69 f7       	brne	.-38     	; 0x39a <__udivmodsi4_loop>
 3c0:	60 95       	com	r22
 3c2:	70 95       	com	r23
 3c4:	80 95       	com	r24
 3c6:	90 95       	com	r25
 3c8:	9b 01       	movw	r18, r22
 3ca:	ac 01       	movw	r20, r24
 3cc:	bd 01       	movw	r22, r26
 3ce:	cf 01       	movw	r24, r30
 3d0:	08 95       	ret

000003d2 <__umulhisi3>:
 3d2:	a2 9f       	mul	r26, r18
 3d4:	b0 01       	movw	r22, r0
 3d6:	b3 9f       	mul	r27, r19
 3d8:	c0 01       	movw	r24, r0
 3da:	a3 9f       	mul	r26, r19
 3dc:	70 0d       	add	r23, r0
 3de:	81 1d       	adc	r24, r1
 3e0:	11 24       	eor	r1, r1
 3e2:	91 1d       	adc	r25, r1
 3e4:	b2 9f       	mul	r27, r18
 3e6:	70 0d       	add	r23, r0
 3e8:	81 1d       	adc	r24, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	91 1d       	adc	r25, r1
 3ee:	08 95       	ret

000003f0 <__divmodhi4>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	07 2e       	mov	r0, r23
 3f4:	16 f4       	brtc	.+4      	; 0x3fa <__divmodhi4+0xa>
 3f6:	00 94       	com	r0
 3f8:	07 d0       	rcall	.+14     	; 0x408 <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4_neg2>
 3fe:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__udivmodhi4>:
 418:	aa 1b       	sub	r26, r26
 41a:	bb 1b       	sub	r27, r27
 41c:	51 e1       	ldi	r21, 0x11	; 17
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__udivmodhi4_ep>

00000420 <__udivmodhi4_loop>:
 420:	aa 1f       	adc	r26, r26
 422:	bb 1f       	adc	r27, r27
 424:	a6 17       	cp	r26, r22
 426:	b7 07       	cpc	r27, r23
 428:	10 f0       	brcs	.+4      	; 0x42e <__udivmodhi4_ep>
 42a:	a6 1b       	sub	r26, r22
 42c:	b7 0b       	sbc	r27, r23

0000042e <__udivmodhi4_ep>:
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	5a 95       	dec	r21
 434:	a9 f7       	brne	.-22     	; 0x420 <__udivmodhi4_loop>
 436:	80 95       	com	r24
 438:	90 95       	com	r25
 43a:	bc 01       	movw	r22, r24
 43c:	cd 01       	movw	r24, r26
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
